package org.foi.nwtis.psikac.vjezba_03_2.konfiguracije;

import java.util.Enumeration;
import java.util.Properties;


public abstract class KonfiguracijaApstraktna implements Konfiguracija{

    private String nazivDatoteke;
    protected Properties postavke;

    public KonfiguracijaApstraktna(String nazivDatoteke) {
        this.nazivDatoteke = nazivDatoteke;
    }

    
    
    @Override
    public void ucitajKonfiguraciju() throws NeispravnaKonfiguracija {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void spremiKonfiguraciju() throws NeispravnaKonfiguracija {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void azurirajKonfiguraciju(String nazivDatoteke) throws NeispravnaKonfiguracija {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void dodajKonfiguraciju(String nazivDatoteke) throws NeispravnaKonfiguracija {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void dodajKonfiguraciju(Properties postavke) {
        for(Enumeration e = postavke.keys(); e.hasMoreElements();){
            String kljuc = (String) e.nextElement();
            String vrijednost = postavke.getProperty(kljuc);
            this.postavke.setProperty(kljuc, vrijednost);
        }
    }

    @Override
    public void kopirajKonfiguraciju(Properties postavke) {
        this.postavke = postavke;
    }

    @Override
    public Properties dajSvePostavke() {
        return this.postavke;
    }

    @Override
    public boolean obrisiSvePostavke() {
        if(this.postavke.isEmpty())
            return false;
        
        this.postavke.clear();
        return true;
    }

    @Override
    public String dajPostavku(String kljuc) {
        return this.postavke.getProperty(kljuc);
    }

    @Override
    public boolean spremiPostavku(String kljuc, String vrijednost) {
        if(this.postojiPostavka(kljuc)){
            return false;
        }else{
            this.postavke.setProperty(kljuc, vrijednost);
            return true;
        }
    }

    @Override
    public boolean azurirajPostavku(String kljuc, String vrijednost) {
         if(!this.postojiPostavka(kljuc)){
            return false;
        }else{
            this.postavke.setProperty(kljuc, vrijednost);
            return true;
        }
    }

    @Override
    public boolean postojiPostavka(String kljuc) {
        return this.postavke.containsKey(kljuc);
    }

    @Override
    public boolean obrisiPostavku(String kljuc) {
         if(this.postojiPostavka(kljuc)){
            return false;
        }else{
            this.postavke.remove(kljuc);
            return true;
        }
    }
    
}
